plugins {
    id "java"
    // id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "edu.wpi.first.GradleRIO" version "2023.1.1-beta-4"
    id "com.diffplug.spotless" version "6.1.0"
}

group = 'frc.sciborgs'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

test {
    useJUnitPlatform()
}

// Code formatting
// spotless {
//     java {
//         target fileTree('.') {
//             include '**/*.java'
//             exclude '**/build/**', '**/build-*/**'
//         }
//         toggleOffOn()
//         googleJavaFormat()
//         removeUnusedImports()
//         trimTrailingWhitespace()
//         endWithNewline()
//     }
//     groovyGradle {
//         target fileTree('.') {
//             include '**/*.gradle'
//             exclude '**/build/**', '**/build-*/**'
//         }
//         greclipse()
//         indentWithSpaces(4)
//         trimTrailingWhitespace()
//         endWithNewline()
//     }
//     format 'xml', {
//         target fileTree('.') {
//             include '**/*.xml'
//             exclude '**/build/**', '**/build-*/**'
//         }
//         eclipseWtp('xml')
//         trimTrailingWhitespace()
//         indentWithSpaces(2)
//         endWithNewline()
//     }
//     format 'misc', {
//         target fileTree('.') {
//             include '**/*.md', '**/.gitignore'
//             exclude '**/build/**', '**/build-*/**'
//         }
//         trimTrailingWhitespace()
//         indentWithSpaces(2)
//         endWithNewline()
//     }
// }
